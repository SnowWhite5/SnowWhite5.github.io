{"posts":[{"title":"用python进行数据分析——基础篇","text":"数据分析常常可通过MySQL、python、excel、BI(Business Intelligence)工具等工具进行分析。今天，我们学习用python进行数据分析，我将分为基础篇和实战篇进行讲解。 一.Numpy Numpy是python开源的科学计算工具包，定义了ndarray的n维数组对象及其运算，能进行线性代数的复杂运算。下文将numpy简写为np。 1.对象定义 12345np.array(A) #将A转为ndArray对象，A可为列表、元祖、数组、生成器等。np.arange(low,high,C) #生成范围是[low,high)，步长为C的等差数列。其中A省略时，默认为0；C省略时，默#认为1。np.linspace(low,high,C) #生成范围是[low,high]，数量为C的等差数列。若需要不包含区间右边的值，只需再#显示设置endpoint值为False。 123456np.random.randint(low,high,size=(A,B,...),dtype=int) #生成随机整数，范围是[low,high)，尺寸是#(A,B,...)，比如(2,3)表示2行3列.dtype可设置为不同的整型，默认int。np.random.rand(A,B,...) #生成范围为[0,1),尺寸为(A,B,...)的浮点型数列。尺寸也可省略，此时仅生成一个#浮点数。np.zeros((A,B,...),dtype = A) #生成全为0的数组，参数1是数组尺寸，参数2是数据类型，类似于word打字#前设置格式。类似函数还有np.ones()，生成全为1的数组，np.eye()，生成主对角线为1的数组，类似于单位矩阵。 2.对象属性 假设已定义ndarray对象arr。 arr.shape，返回arr对象的尺寸，即(A,B,...)。 arr.size，返回arr对象中总数据量，即AB...。 arr.ndim，返回arr对象的维度，例如arr的尺寸是(A,B,C,D)，则其维度为4。 arr.dtype，返回arr对象中数值的类型，如int,float。需与type(arr)区分，后者返回arr的类型，即np.ndarray。 3.对象方法 假设已定义ndarray对象arr。对象方法有两种调用方法，一种是“.”调用，一种是np.xxx()调用，如arr.sum()和np.sum(arr)。 arr.T，返回arr对象的转置。 arr.reshape(A,B,...)，按尺寸为(A,B,...)重塑arr对象，但需注意，新尺寸需不改变对象总数据量。需与np.resize(arr,(A,B,...))区分，resize并不要求数据数量保持一致。 arr.sum()，求取arr对象中所有数据总和。 arr.mean()，求取arr对象中所有数据平均值。 arr.max()，求取arr对象中所有数据最大值。 arr.min()，求取arr对象中所有数据最小值。 arr.std()，求取arr对象中所有数据标准差。 arr.var()，求取arr对象中所有数据方差。 另，3-8还可设置axis参数，指定运算仅在某一维上进行。 二.Pandas 数据分析中，Pandas中常用的数据对象为Series和DataFrame。接下来将分别进行学习。下文将Pandas简写为pd。 Series——一维数组 1.对象定义 1pd.Series(A,index=B) #将A转为Series对象。 其中， A可以是一维列表、元组、ndarray数组，B是定义索引index的字符串列表，可省略； A也可以是字典，此时字典的key为索引，value为Series的值； A还可以为标量，按index大小填充。 2.对象属性 numpy有的属性，Series也有，除此之外，还可单独获取或设置index。 3.对象方法 numpy有的属性，Series也有，除此之外，另有以下方法（假设定义了SerieS对象df）： 1234df.head(n) #返回df中前n行df.tail(n) #返回df中后n行df.isnull() #判断每个值是否为null，并返回对应的布尔序列df.shift(n) #数值平移n个数，n为正数表示向下平移，负数表示向上平移，索引对应的空行填充np.NaN。 DataFrame——二维数组（表格） 1.对象定义 12Pd.DataFrame(A, index=B) #将A转为DataFrame对象，类似于Series，区别在于此处的A为二维的。而index#仍作为给行取索引。 2.对象属性和方法 类似于Series，特殊属性或方法于实战篇补充。 3.索引和切片 由于DataFrame结构的特殊性，其索引和切片不同于列表等常见结构，因此需单独学习。假设定义了DataFrame对象df。 按列索引。此时和列表索引一样，用中括号进行索引，得到一个Series对象；如列名为字符串，也可作为属性进行列索引。也可多列索引，嵌套两层中括号进行索引。 按行索引。由于行可用index进行定义，因此分为显式索引和隐式索引。 df.loc[...]是显式索引，用index定义值进行索引。 df.iloc[...]是隐式索引，用0,1,2...进行索引。 也可多行索引，同样为嵌套两层中括号。 按行和列索引单值。有两种方法：将其看作字典，先取某一列Series再取行，如df[‘a’][0]；或是将其看作二维数组，用loc或iloc进行取值，如df.iloc[0,0] 按列切片。即行全取，列切片，用loc进行切片。 按行切片。用loc或iloc进行切片，如df.iloc[0:2]。 三.对空值进行过滤或填充 1.None 与 NaN的区别 None是None对象类型，而NaN是numpy下的，float类型 为什么数据分析中空值为NaN？ 因为NaN可以参与运算，得到的值仍为NaN；而none不可以参与运算。数据分析中常需要各种运算，NaN不会干扰或中断运算。 在pandas中如果遇到None形式的空值，则会将其转为NaN。 2.对空值进行过滤 123456#1.找到有空值的行s1 = df.isnull().any(axis = 1)#2.获取行索引s2 = df.loc[s1].index#3.删除df.drop(labels = s2, axis = 0) 3.对空值进行填充 此处可用fillna()方法进行实现。主要分为三种方式： 将某值替换所有空值 df.fillna(value = x) 用已有值覆盖填充所有空值 df.fillna(method = ‘ffill’, axis = 0) 其中，Method定义覆盖方法，ffill表示向前覆盖，index大的覆盖index小的;bfill表示向后覆盖。axis表示行或列上操作，0表示列，1表示行。 指定空值位置进行替换 利用df.loc[x,y]可索引具体某处，对其进行替换覆盖。 如： 1df2.loc[df2['attended_exams'].isnull(), 'attended_exams'] = 0 四.重复数据处理 1drop_duplicate(subset = xxx, keep = xxx, inplace = xxx) 其中，subset用来设置删除的列特征。keep参数可设置为：’first’保留重复的第一行，’last’保留重复的最后一行,False为默认值，表示都删除。inplace表示是否在原数据上保留操作，True表示保留，False为默认值，表示不保留。 五.处理异常数据 处理异常数据，一般分为三个步骤： 找到判定条件 得到bool序列 对异常数据进行操作 六.其他高级操作 1.concat 矩阵拼接的函数。主要参数有： objs，Series，DataFrame或Panel对象的序列或映射。 axis，默认为0。 join，{'inner'，'outer'}，默认为“outer”。如何处理其他轴上的索引。outer为联合和inner为交集。 2.merge 数据合并，类似于MySQL的连接操作。主要参数有： objs。合并对象，可用pd.merge传入需合并的对象，也可作为方法进行操作，如df.merge(df2,...) on。连接条件，即需保持相等的列，可为多个，用列表传入。当连接条件的列在两表中不同时，也可用left_on，right_on分别指示。 how。连接方式，分为left、right、inner、outer、cross。与MySQL中定义类似。 3.qurey 用于查找，返回与原数据的类型一致。传入为查找语句或条件，整个条件用单引号括起来。多个条件用&amp;连接。列名无需加引号，值若为STR，需加双引号。 4.sort_values 用于排序的方法。主要参数有： by。依据什么进行排序，传入为单个列名或行索引，也可以为列名列表。 axis。在横向或竖直方向上排序。 inplace。是否应用回原对象，默认为False，不应用。 na_positon。{‘first’,’last’}。设置缺失值的位置。 ascending。默认为True，升序排列。 5.value_counts 统计某一列中不同值的个数，为Series的方法。如df[‘aaa’].value_counts() 6.rename 修改列名称的方法。主要参数为： columns。传入值为字典类型，key值为原列名，value值为新列名。 inplace。是否将修改应用回原数据。默认为False。 7.reset_index 重置索引的方法。数据清洗时，会将带空值的行删除，此时DataFrame或Series类型的数据不再是连续的索引，可以使用reset_index()重置索引。 8.replace 替换的方法。除inplace外，还有to_place和value，regex参数，分别表示替换后的值，替换前的值，是否用正则。一般有3种用法： 全表中替换某值 可将替换前后的值分别传给to_place和value，可为单个也可为多个，也可用字典表示，key值为原值，value为新值，均赋值给to_place。 某一列中进行替换 针对某一列进行replace方法运算，即df[...].replace(...)。 使用正则 若需用正则，可将regex设为True。用正则表达式表示需替换的值。且可针对全表或某列。 9.map 映射的方法。传入字典后，将某一列值按照字典关系进行映射，映射后的结果与映射前进行绑定，常与groupby一起操作。 也可用transform或apply传入自定义映射函数进行映射。区别在于，transform与map一样，输出已将结果前后进行绑定，而apply并未进行绑定，还需手动将其映射。 10.groupby 分组的方法，主要参数为by，分组依据的列。分组后，可针对某一列进行运算，如sum,count,mean。 输出索引非连续，若需要DataFrame类数据，还需reset_index操作。","link":"/2023/05/13/data-analysis-1/"},{"title":"用python进行数据分析——实战篇","text":"上一节我们学习了python进行数据分析的基础，这节我们通过分析真实股票数据来进一步理解和学习。 一.导入需要的库 12345import tushare as tsimport pandas as pdfrom pandas import DataFrame, Seriesimport numpy as npimport matplotlib.pyplot as plt Tushare是一个免费、开源的python财经数据接口包。主要实现对股票等金融数据从数据采集、清洗加工 到 数据存储的过程，能够为金融分析人员提供快速、整洁、和多样的便于分析的数据，为他们在数据获取方面极大地减轻工作量，使他们更加专注于策略和模型的研究与实现上。考虑到Python pandas包在金融量化分析中体现出的优势，Tushare返回的绝大部分的数据格式都是pandas DataFrame类型，非常便于用pandas/NumPy/Matplotlib进行数据分析和可视化。 Pandas、numpy是数据分析常用的，对表格、矩阵等数据进行处理的库，上一节已介绍过。 Matplotlib 是一个用于绘制图表和可视化数据的 Python库。它提供了丰富的绘图工具，可以用于生成各种静态、交互式和动画图表。Matplotlib 是数据科学、机器学习和科学计算领域中最流行的绘图库之一。 二.数据获取及预处理 1.使用tushare包获取某支股票的历史行情数据 12#获取某支股票的历史行情数据df = ts.get_hist_data(code= '600519', start= '2021-01-01') 利用get_hist_data函数获取数据，主要参数有： 123code，证券代码start，开始日期end,结束日期 返回为DataFrame格式，各参数的意义是： 123456789101112131415date——日期open——开盘价high——最高价close——收盘价low——最低价volume——成交量price_change——价格变动p_change——涨跌幅ma5——5日均价ma10——10日均价ma20——20日均价v_ma5——5日均量v_ma10——10日均量v_ma20——20日均量turnover——换手率 2.数据的存储于读取 12df.to_csv('./data.csv') #将数据存储为csv格式df=pd.read_csv(‘./data.csv’) #将csv数据读入 to_csv是DataFrame类的方法，主要参数有： 1234567path，文件输出路径sep，分隔符，默认为“,”;na_rep，缺失数据填充，默认是空字符串float_format，定义字符串格式columns，要输出到csv中的列header，是否保留列名，默认为保留index，设置索引（行名称），默认写入encodIng，编码格式，默认为“utf-8”。 由于原数据中，index是日期，所以存入后，被作为一列存入。 3.查看各列数据属性 1df.info() 返回参数有： 12345RangeIndex——对象的行数column——每列的名称Non-Null Count——每列的非空值数量Dtype——每列的非空值数量memory usage——对象的内存使用情况 4.将日期设为index 为了之后针对日期的操作，日期对象需为datetime类型。可用pd.to_datetime进行转换。 1df['date'] = pd.to_datetime(df['date']) 再将日期设为index。 1df.set_index('date',inplace=True) 输入参数有： 1234key，需设置为索引的列名drop，删除用作索引的列，默认为Trueappend，是否将该列附加到现有索引，默认为Falseinplace，是否将当前操作保存回原数据，默认为False 三.数据分析 1.输出该股票所有收盘比开盘上涨3%以上的日期 第一步：列出条件，收盘比开盘上涨3%以上 1(df[‘close’]-df[‘open’])/df[‘open’] &gt; 0.03 第二步：获取所需数据。日期即索引 1df.loc[(df[‘close’]-df[‘open’])/df[‘open’] &gt; 0.03].index 2.输出该股票所有开盘比前日收益跌幅超过2%的日期 第一步：前日收益需用到shift方法。df.shift(n) ，表示数值平移n个数。 1df[‘close’].shift(1) 第二步：列出条件，开盘比前日收益跌幅超过2% 1(df[‘open’] - df[‘close’].shift(1))/df[‘close’].shift(1) &lt;0.02 第三步：获取所需数据。日期即索引 1df.loc[(df['open'] - df['close'].shift(1))/df['close'].shift(1) &lt; 0.02].index 3.假如我从2022年1月1日开始，每月第一个交易日买入一手股票，每年最后一个交易日卖出所有股票，到今天为止，收益如何？ 背景知识：一手股票指100支股票 思考： 时间节点：2022.1.1——2023.5.25 买：一个完整的年需买入1200支 卖：一个完整的年需卖出1200支 买卖单价：假设用开盘价。 第一步：按日期截取数据 1new_df = df['2022-01-01':'2023-05-25'] 第二步：获取每个月的第一个交易日，需用resample方法进行按月重采样 1df.monthly = new_df.resample(‘M’).first() 注意： 1.first和last分别返回重采样后每组的第一行和最后一行，但index会显示异常。 2.resample后可用group查看分组结果 第三步：计算买入 1count = df.monthly[‘open’].sum()*100 第四步：计算卖出 12345678#按年采样并取最后一行new_df.resample(‘A’).last()#由于当年非年底，需切除最后一年df_yearly = new_df.resample('A').last()[:-1]#计算卖出reav = df_yearly['open'].sum()*1200#最后一年手中剩余部分，按最后一天的收盘价进行计算last_money = 100*new_df['close'][-1] 第五步：计算总收益 1last_money + reav - count 四.双均线策略 1.均线 对于每一个交易日，都可以计算出前N天的移动平均值，然后把这些移动平均值连起来，成为一条线，就叫做N日移动平均线，移动平均线常用线有5天、10天、30天、60天、120天和240天的指标。计算方式为 1MA=(C1+C2%+C3+...+CN)/N，Ci为第i天的收盘价 2.计算5日均线和30日均线 用移动窗口rolling方法实现，输入参数为window，表示移动窗口大小。根据均线定义： 12ma5 = df[‘close’].rolling(5).mean() #5日均线ma30 = df[‘close’].rolling(30).mean() #30日均线 将其画出： 12plt.plot(ma30)Plt.plot(ma5) 3.金叉日期和死叉日期 分析指标中的两根指标线，一根为短时间内的指标线，一根为长时间内的指标线 金叉指短期指标线向上穿过长期指标线，通常被视为股票价格的突破信号，表示短期内的趋势将转为上涨。 死叉则为短期指标线向下穿过长期指标线，通常被视为股票价格的下跌信号，表示短期内的趋势将转为下跌。 4.分析找出金叉日期和死叉日期 根据定义，金叉左边为短期均线值小于长期均线值，右边为短期均线值大于长期均线值。死叉左边为短期均线值大于长期均线值，右边为短期均线值小于长期均线值。 定义s1为ma5 小于ma30，s2 为ma5 大于ma30，则对于s1，从True变为False变为的点为金叉，从False变为True的点为死叉。而s2刚好相反。 假设： 123456s1: T T F F Ts2: F F T T Fs2向右平移1位后得到s22:s22: F F T T Fs1,s22与后： F F F T 得到死叉s1,s22或后： T F T T 得到金叉 翻译为代码为： 123456s1 = ma5 &lt; ma30s2 = ma5 &gt; ma30death_ex = s1 &amp; (s2.shift(1))death_date = df.loc[death_ex].indexgolden_ex = -(s1 | (s2.shift(1)))golden_date = df.loc[golden_ex].index 5.如果初始资金为100000元，金叉尽量买入，死叉全部卖出，到今天为止，炒股收益率如何？ 将金叉和死叉日期合并在同一个序列中 123s1 = Series(data = 1, index = golden_date)s2 = Series(data = 0, index = death_date)s = pd.concat(s1,s2) 定义初始条件 123first_money = 100000money = first_money #现有钱数hold = 0 #持有股数 用一个for循环计算金叉买入，死叉卖出 12345678910for i in range(0,len(s)): if s[i] ==1: #金叉 p = df.loc[s.index[i]]['open'] head_count = money // (p*100) #尽量买入，即现有资金能买的股数 hold += head_count; money -= hold * p; else: #死叉 p = df.loc[s.index[i]]['open'] money +=p *hold; hold = 0; #全部卖出，剩0 假如s以金叉结束，则按最后一天的收盘价卖出全部，并计算收益 12last_money = hold * df['close'][-1]money + last_money -first_money","link":"/2023/06/10/data-analysis2/"},{"title":"用MySQL ＆ Power BI 进行数据分析","text":"除了表格数据，数据分析也常用到可视化工具进行分析和汇报，如Power BI, tableau等。今天，我们将结合MySQL和Power BI进行数据分析并制作简报。 一.数据源 该项目来源于Youtube视频，数据源为作者提供的数据，是某公司从200年到2020年来22000名员工的数据，地址是https://github.com/Irene-arch/HR-Dashboard-MySQL-PowerBI。具体如下图。 二.用MySQL进行数据清洗和分析 本项目使用MySQL自带的客户端，使用前，需安装MySQL服务器和客户端，启动服务器并连接。 1.创建并使用数据库 12CREATE DATABASE projects;USE projects; 2.导入数据并将该表命名为hr 下拉刚创建的数据库，右键Tables，选择table data import wizard，并选中需导入的表格。注意！该客户端导入时可完成utf-8编码操作，若使用的客户端无此操作，需用office自行编码后另存为。 3.查看数据 1SELECT * FROM projects.hr; 可见，该表存在许多需要数据清理的地方，如第一列的列名为乱码，日期格式不统一。 4.数据清洗 修改列名 12alter table hrCHANGE COLUMN 锘縤d emp_id VARCHAR(20) NULL; 统一日期格式 由上图可知，birthdate，hiredate和termdate均为日期，我们先处理前两列。birthdate和hiredate格式有两种，一种是以“/”隔开，一种是以“-”隔开，因此，这里需用到case进行设置，分别将string格式化后再统一。 在此之前，若需要update和where可联合使用，需打开MySQL的安全模式。 1set sql_safe_updates = 0; 再进行更新操作。结果如下图。 123456update hrset hire_date = casewhen hire_date like '%/%' then date_format(str_to_date(hire_date,'%m/%d/%Y'),'%Y-%m-%d')when hire_date like '%-%' then date_format(str_to_date(hire_date,'%m-%d-%Y'),'%Y-%m-%d')else NULLend; 最后再将其设为date格式。birthdate也是同样的操作。 12ALTER TABLE hrMODIFY COLUMN hire_date DATE; 再针对termdate进行操作。先查看其数据，如图。 可见其格式统一，只需为空行添加数据及修改数据类型为date。为方便后期数据分析，将分别对有数据和无数据进行操作。 针对有数据的情况，将数据转为date型。 123update hrset termdate = date(str_to_date(termdate,'%Y-%m-%d %H:%i:%s UTC'))where termdate is not null and termdate != ''; 针对无数据或日期超过当前日期的异常数据的情况，将其统一为0000-00-00。 123update hr set termdate = '0000-00-00'where termdate is null or termdate = '' or termdate &gt; curdate(); 最后设置其格式为date。 12alter table hrmodify column termdate date; 添加age列，将年龄设置为当前时间减去出生日期，并取年。 1234alter table hr add column age int;update hr set age = timestampdiff(YEAR,birthdate,curdate()); 三.用MySQL进行数据分析 1.公司里员工的性别划分是什么？ 1234select gender, count(*) countfrom hrwhere age &gt;= 18 and termdate = date(‘0000-00-00’) group by gender; 注：age大于等于18为真实员工，termdate为0000-00-00表示在职。 2.公司中员工的种族/民族划分是什么？ 12345select race,count(*) countfrom hrwhere age &gt;=18 and termdate =date('00000-00-00')group by raceorder by count desc; 3.公司内员工的年龄和性别分布如何？ 假设以10年为一个区间，则 12345678910111213select casewhen age &gt;= 18 and age&lt;=24 then '18-24'when age &gt;= 25 and age &lt;=34 then '25-34'when age &gt;= 35 and age &lt;=44 then '35-44'when age &gt;= 45 and age &lt;=54 then '45-54'when age &gt;= 55 and age &lt;=64 then '55-64'else '65+'end as age_group, gender, count(*) countfrom hrwhere age &gt;=18 and termdate =date('00000-00-00')group by age_group,genderorder by age_group, gender; 4.有多少员工在总部工作，而不是在偏远地区工作？ 12345select location, count(*) as countfrom hrwhere age &gt;=18 and termdate =date('00000-00-00')group by locationorder by location; 5.已被解雇的员工的平均雇佣年限是多少？ 123select round(avg(datediff(termmdate, hire_date)/365), 2) avg_length_employmentfrom hrwhere termdate &lt;&gt; date(‘0000-00-00’) and age &gt;= 18 6.不同部门和不同职位之间的性别分布有何不同？ 12345select department,jobtitle,gender,count(*) countfrom hrwhere age &gt;=18 and termdate =date('00000-00-00')group by department,jobtitle,genderorder by department,jobtitle; 7.整个公司的职位分配情况如何？ 12345select jobtitle,count(*) count from hrwhere age &gt;=18 and termdate =date('00000-00-00')group by jobtitleorder by jobtitle desc; 8.哪个部门的人员流动率最高？ 12345678910111213141516select department,total_count,terminated_count, terminated_count/total_count as terminated_rate from ( select department, count(*) as total_count, sum( case when termdate &lt;&gt;date('00000-00-00') and termdate &lt;=curdate() then 1 else 0 end ) as terminated_count from hr where age &gt;= 18 group by department ) as A order by terminated_rate desc; 该项需求比前几项要复杂一些。首先确认人员流动率的计算公式为离职人数/总人数，总人数即按部门分类后算count，辞职人数需进行sum运算，若已离职则计1，否则计0。得到两值后，再在外层嵌套一个select进行运算。 9.不同城市和州的员工分布情况是多少？ 12345select location_state, count(*) as countfrom hrwhere age &gt;=18 and termdate =date('00000-00-00')group by location_stateorder by count desc; 10.公司的员工数量如何随hire_date和termdate而变化？ 123456789101112131415select year,hires,termination,hires-termination as net_change,round((hires-termination)/hires*100, 2) as net_change_percentfrom (select Year(hire_date) as year,count(*) as hires,sum(case when termdate &lt;&gt;date('00000-00-00') and termdate &lt;=curdate() then 1 else 0 end) as terminationfrom hrwhere age &gt;= 18group by year) as Aorder by year; 首先理解题目。题目的意思是计算同一年入职的人中有多少离职的，并按年份表现其变化。接着，确认需要获取哪些信息：雇佣年份，当年入职员工数量，当年员工数量变动率。而员工数量变化率的公式为(当年入职员工数量-已离职人数)/当年入职员工数量*100%。 11.每个部门的任期分配情况是多少？ 1234select department,round(avg(datediff(termdate,hire_date)/365),0) as avg_tenurefrom hrwhere termdate &lt;= curdate() and termdate &lt;&gt;date('00000-00-00') and age &gt;= 18group by department; 四.用Power BI绘制可视化简报 根据MySQL得到的分析结果，用Power BI绘制可视化简报。如图为Power BI的初始页面。 界面上方与office使用基本一致，绘图功能主要为右方区域，包括（堆积）条形图、（堆积）柱形图、饼图、地图等，堆积是一种叠加，是用来展示叠加之后，局部与整体的成分关系的。 1.插入标题 点击上方插入中的文本框进行插入。与PPT的操作一样，我们可以通过拖动改变其大小，设定文本格式，输入文字。 2.显示平均雇佣年限 点击上方主页中的插入数据，选中需要导入的表格并插入，如图。 插入的数据将会出现在最右边。一个数据的话，我们将使用卡片图进行展示，点击可视化中的卡片图，再选中需显示的数据。 而主界面上显示如图。 我们可通过拖动主界面的文本框进行尺寸修改，也可通过右方可视化下的设置视觉对象格式进行修改，包括对象字体、颜色设定的视觉对象设定和设置标题、位置、尺寸的常规设定。 此处，我们将视觉对象-类别标签关闭，在常规-标题设置自定义的标题为Average Length of Employment(Years)。再在视觉对象-标注值将对象数据颜色修改为蓝色。效果如图。 3.性别分布 使用柱形图表示性别分布。导入数据，选中可视化的堆积柱形图，再选中需要显示的性别信息。 对于数据的选择，也可用拖拽的方式，分别放在选择图形后，可视化下出现的x轴、y轴、图例等空格中。而x轴、y轴等显示设定，则在视觉对象下，包括对值是否显示、值的常规设置、轴标题以及类别间隔的设定等。 此处，我们将y轴值隐藏，改为打开视觉对象-数据标签，即显示在每个类别的柱子上。再修改表标题、y轴标题，隐藏x轴标题。效果如图。 4.年龄和性别分布 用簇型柱形图表示年龄和性别分布，x轴为年龄，y轴为count，图例为gender，如图。属性设置方式与以上雷同，不再赘述。 该表还可用堆积柱形图表示，如图。 5.总部与分部的员工分布 用环形图表示地区分布，如图。 此处，我们将修改常规-标题、视觉对象-扇区-颜色、视觉对象-图例-大小。效果如图。 6.员工数量变化 用折线图表示员工数量变化。如图。 此处，我们将打开视觉对象-标记，即标出折线上的每一个点，之后进行常规操作。 需注意，中文版将line翻译为行，该项可修改折线属性。修改后效果如下。 7.地区分布 用地图表示员工地区分布，将location_state设置到位置，count设置到气泡大小，如图。 在视觉对象中，可设置地图种类，气泡属性、类别标签等。 此处，我们将放大气泡大小、打开类别标签并设置为无底黑字，如图。 8.导出 最后，简报制作完成后，可点击文件-导出，导出为pdf格式或BI模板。 四.小结 该项目从MySQL清洗数据，分析数据到Power BI图表展示，更直观多样地从数据中获取信息。MySQL中常用操作包括group by，order by，较复杂些需要子查询，case，正则等操作。而Power BI中，一般按导入数据，选择可视化对象，设置对象参数，修改对象和文本框属性，导出的步骤进行操作。","link":"/2023/07/15/data-analysis3/"}],"tags":[{"name":"数据分析","slug":"数据分析","link":"/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"categories":[],"pages":[]}